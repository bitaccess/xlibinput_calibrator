# Runs when there is a push to master and there has been a change to
# the DEBIAN/control file indicating a version change
on:
  push:
    #branches:
    #  - master
    paths:
      - 'Release_notes.txt'
env:
  ARCH: 'all'
  MAINTAINER: 'bofh@bitaccess.co'
  DESC: 'Calibrate a touch screen when X11 relies on libinput'
  DESCLONG: "The aim of this project is to allow to calibrate a touch screen when X11 relies on libinput. For older X11, which doesn't relies on libinput, you have to use the old xinput_calibrator."  #not yet used by jiro4989/build-deb-action

jobs:
  # This is mostly to better understand what's available in the github action
  show-info:
    if: github.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Print environment variables
        run: |
          echo '================================================================ env|grep -E "GITHUB|RUNNER|CI"'
          env|grep -E 'GITHUB|RUNNER|CI'|sort || true
          echo '================================================================ env minus GITHUB|RUNNER|CI'
          env|grep -vE 'GITHUB|RUNNER|CI'
          echo
          echo '================================================================'
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
          echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
          echo "================================================================ done"

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup some variables
        run: |
          echo "APP_VERSION=$(< ${{ github.workspace }}/Release_notes.txt awk -F: '/^[0-9]/{print $1}'|tail -1)" >> $GITHUB_ENV
          echo "APP_NAME=${GITHUB_REPOSITORY#*\/}"  >> $GITHUB_ENV
          echo "PACKAGE_NAME=${APP_NAME/_/-}"  >> $GITHUB_ENV
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          echo "APP_NAME=${{ env.APP_NAME }}"
          echo "PACKAGE_NAME=${{ env.PACKAGE_NAME }}"
          echo "APP_VERSION=${{ env.APP_VERSION }}"
          echo "APP_ARCH=${{ env.APP_ARCH }}"
          echo "APP_MAINTAINER=${{ env.APP_MAINTAINER }}"
          echo "APP_DESC=${{ env.APP_DESC }}"
          echo "****************************************************************"
          echo "pwd"
          pwd
          echo "****************************************************************"
          echo "ls -l ${{ github.workspace }}"
          ls -l ${{ github.workspace }} 
          echo "****************************************************************"
          echo "ls -ld ${{ github.workspace }}/*"
          ls -ld ${{ github.workspace }}/*
          echo "****************************************************************"
      - run: echo "üçè This job's status is ${{ job.status }}."
        
  build-deb:
    if: github.ref_type == 'branch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            codename: focal
            major: 20
          - os: ubuntu-22.04
            codename: jammy
            major: 22
          - os: ubuntu-24.04
            codename: noble
            major: 24
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup some variables
        run: |
          echo "APP_VERSION=$(< ${{ github.workspace }}/Release_notes.txt awk -F: '/^[0-9]/{print $1}'|tail -1)" >> $GITHUB_ENV
          APP_NAME=${GITHUB_REPOSITORY#*\/}
          echo "APP_NAME=$APP_NAME"  >> $GITHUB_ENV
          echo "PACKAGE_NAME=${APP_NAME/_/-}"  >> $GITHUB_ENV
          echo cat $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Extract branch name
        shell: bash
        #run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        #run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF_NAME//\//_})"
        # set-output fully disabled 2023-05-31 - https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
        run: echo "branch=$(echo ${GITHUB_REF_NAME//\//_})" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Install dependencies
        run: |
          sudo apt install -y devscripts dh-make libxrandr-dev libxi-dev txt2man

      - name: Prep the code for /usr/local
        run: |
          mkdir -p .debpkg/usr/local/bin .debpkg/usr/local/man/man8 .debpkg/usr/local/share/doc/xlibinput-calibrator

          # Build touchscreen calibration
          echo compiling xlibinput-calibrator for ${{ matrix.os }}
          cd src && make && cd .. && make man
          save_rc=$?;[ $save_rc -ne 0 ] && echo "FAILURE on line $BASH_SOURCE:$LINENO - make"

          echo rsync to .debpkg
          rsync -rlptvD Release_notes.txt \
                        LICENSE.txt \
                        .debpkg/usr/local/share/doc/xlibinput-calibrator/
          rsync -rlptvD src/xlibinput_calibrator \
                        .debpkg/usr/local/bin/
          rsync -rlptvD xlibinput_calibrator.8 \
                        .debpkg/usr/local/man/man8/

          echo
          sudo chown -R root:root .debpkg/usr/local/bin .debpkg/usr/local/man/man8 .debpkg/usr/local/share/doc/xlibinput-calibrator

      - name: build with dpkg-deb
        id: build
        run: |
          mkdir -p .debpkg/DEBIAN
          echo "Package: ${{ env.PACKAGE_NAME }}" >>.debpkg/DEBIAN/control
          echo "Version: ${{ env.APP_VERSION }}${{ matrix.codename }}${{ matrix.major }}" >>.debpkg/DEBIAN/control
          #echo "Source: ${{ env.PACKAGE_NAME }}" >>.debpkg/DEBIAN/control
          echo "Section: utils" >>.debpkg/DEBIAN/control
          echo "Priority: optional" >>.debpkg/DEBIAN/control
          echo "Maintainer: ${{ env.MAINTAINER }}" >>.debpkg/DEBIAN/control
          # echo "Build-Depends: libxrandr-dev," >>.debpkg/DEBIAN/control
          # echo "     libxi-dev,"
          # echo "     libx11-dev,"               
          # echo "     txt2man"
          #echo "Standards-Version: 4.3.0" >>.debpkg/DEBIAN/control
          #echo "Homepage: https://github.com/kreijack/xlibinput_calibrator" >>.debpkg/DEBIAN/control
          echo "Architecture: ${{ env.ARCH }}" >>.debpkg/DEBIAN/control
          #echo 'Depends: ${misc:Depends},' >>.debpkg/DEBIAN/control
          # echo 'Depends: libc6," >>.debpkg/DEBIAN/control
          # echo "         xinput" >>.debpkg/DEBIAN/control
          echo "Description: ${{ env.DESC }}" >>.debpkg/DEBIAN/control
          echo " ${{ env.DESCLONG }}" >>.debpkg/DEBIAN/control
          echo "****************"
          echo "cat .debpkg/DEBIAN/control"
          cat .debpkg/DEBIAN/control
          echo "****************"
          dpkg-deb --build .debpkg ${{ env.PACKAGE_NAME }}_${{ env.APP_VERSION }}${{ matrix.codename }}${{ matrix.major }}_${{ env.ARCH }}.deb
          echo rc=$?
          echo "PACKAGE_FILE=${{ env.PACKAGE_NAME }}_${{ env.APP_VERSION }}${{ matrix.codename }}${{ matrix.major }}_${{ env.ARCH }}.deb" >> "$GITHUB_ENV"
      
      - name: verify
        run: |
          echo pwd
          pwd
          echo
          echo "deb file step output: ${{ steps.build.outputs.file_name }}"
          echo "deb file env value  : $PACKAGE_FILE"
          echo "deb file {{}} value : ${{ env.PACKAGE_FILE }}"
          echo filename: $PACKAGE_FILE
          ls -l $PACKAGE_FILE
          echo
          dpkg -c $PACKAGE_FILE

      # scp the deb package to the package repo
      - name: upload file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEB_REPO_HOST }}
          username: ${{ secrets.DEB_REPO_USERNAME }}
          key: ${{ secrets.DEB_REPO_KEY }}
          #source: ${{ steps.build.outputs.file_name }}
          source: ${{env.PACKAGE_FILE}}
          #target: /var/www/html/bitaccess-staged/dists/upload/${{ steps.extract_branch.outputs.branch }}
          target: /var/www/html/bitaccess-nonstaged/dists/upload/${{ steps.extract_branch.outputs.branch }}
